version: "3.8"

services:
  # Frontend
  # Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - PORT=8080
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=${DB_USER:-apiforge}
      - DB_NAME=${DB_NAME:-apiforge}
      - DB_SSL_MODE=disable
      - REDIS_URL:redis:6379
      - CORS_ORIGIN=http://localhost:3000
      - LOG_LEVEL=${LOG_LEVEL:-debug}
      - DB_PASSWORD=/run/secrets/db_password
      - JWT_SECRET=/run/secrets/jwt_secret
      - REDIS_PASSWORD=/run/secrets/redis_password
    secrets:
      - db_password
      - jwt_secret
      - redis_password
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - /app/vendor
      - ./generated:/app/generated
    networks:
      - apiforge-network
    restart: unless-stopped

  # Database
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${DB_NAME:-apiforge_db}
      - POSTGRES_USER=${DB_USER:-apiforge}
      - POSTGRES_PASSWORD_FILE=/run/secrets/db_password
    secrets:
      - db_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d/
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${DB_USER:-apiforge} -d ${DB_NAME:-apiforge_db}",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - apiforge-network
    restart: unless-stopped

  # Redis (Cache)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: >
      sh -c "
        if [ -f /run/secrets/redis_password ]; then
          redis-server --requirepass $$(cat /run/secrets/redis_password)
        else
          redis-server --requirepass ''
        fi
      "
    secrets:
      - redis_password
    volumes:
      - redis_data:/data
    healthcheck:
      test:
        - CMD
        - sh
        - -c
        - |
          if [ -f /run/secrets/redis_password ]; then
            redis-cli -a $$(cat /run/secrets/redis_password) ping
          else
            redis-cli ping
          fi
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - apiforge-network
    restart: unless-stopped

  # Redis UI
  redis-commander:
    image: rediscommander/redis-commander:latest
    environment:
      - REDIS_HOSTS=local:redis:6379
      - REDIS_PASSWORD_FILE=/run/secrets/redis_password
      - HTTP_USER=${REDIS_COMMANDER_USER:-admin}
      - HTTP_PASSWORD_FILE=/run/secrets/redis_commander_password
    secrets:
      - redis_password
      - redis_commander_password
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - apiforge-network
    restart: unless-stopped
    profiles:
      - tools

  # NGINX
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployments/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deployments/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - apiforge-network
    restart: unless-stopped
    profiles:
      - production

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./deployments/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
      - "--web.enable-admin-api"
    networks:
      - apiforge-network
    restart: unless-stopped
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD_FILE=/run/secrets/grafana_password
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_ANALYTICS_REPORTING_ENABLED=false
    secrets:
      - grafana_password
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deployments/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./deployments/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - apiforge-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Email Testing
  mailhog:
    image: mailhog/mailhog:latest
    ports:
      - "8025:8025" # Web UI
      - "1025:1025" # SMTP
    networks:
      - apiforge-network
    restart: unless-stopped
    profiles:
      - tools

  # pgAdmin (PostgreSQL Management)
  pgadmin:
    image: dpage/pgadmin4:latest
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL:-admin@apiforge.local}
      - PGADMIN_DEFAULT_PASSWORD_FILE=/run/secrets/pgadmin_password
      - PGADMIN_CONFIG_SERVER_MODE=False
      - PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED=False
    secrets:
      - pgadmin_password
    ports:
      - "8082:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - apiforge-network
    restart: unless-stopped
    profiles:
      - tools

  # Distributed Tracing (Jaeger)
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686" # Jaeger UI
      - "14268:14268" # Jaeger collector
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - apiforge-network
    restart: unless-stopped
    profiles:
      - observability

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  apiforge-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

secrets:
  db_password:
    file: ./secrets/db_password.txt
  jwt_secret:
    file: ./secrets/jwt_password.txt
  redis_password:
    file: ./secrets/redis_password.txt
  grafana_password:
    file: ./secrets/grafana_password.txt
  redis_commander_password:
    file: ./secrets/redis_commander_password.txt
  pgadmin_password:
    file: ./secrets/pgadmin_password.txt
